generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ========== App Models ========== */

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  password      String?       // hash bcrypt
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relaciones
  profile       Profile?      // 1:1 (un perfil por usuario)
  coverLetter   CoverLetter?
  accounts      Account[]
  sessions      Session[]
}

model Profile {
  id         String     @id @default(cuid())

  // Relación 1:1 => el lado “definidor” debe ser unique
  userId     String?    @unique
  user       User?      @relation(fields: [userId], references: [id])

  // Campos del perfil
  username   String     // -> handle
  fullName   String     // -> name
  avatarUrl  String     // -> avatar
  category   Category   @default(Developer) // -> role
  skills     String[]   // -> tags (array TEXT[])

  bio        String?
  location   String?
  available  Boolean    @default(false)

  linkedin   String?
  x          String?
  calendly   String?
  telegram   String?
  discord    String?

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Category {
  Builder
  Founder
  Developer
  Designer
  Investor
  Marketer
}

model CoverLetter {
  id        String   @id @default(cuid())
  content   String
  userId    String   @unique     // una carta por usuario
  user      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt
}

/* ========== NextAuth Models ========== */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
