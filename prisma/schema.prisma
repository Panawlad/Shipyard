generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  password      String?  // hash bcrypt
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  profile       Profile?
  coverLetter   CoverLetter?
  accounts      Account[]
  sessions      Session[]
}

model Profile {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Basics
  username   String   @unique
  fullName   String
  avatarUrl  String?  @db.Text
  bio        String   @db.Text

  // Select
  category   Category

  // Extras
  skills     String?      // CSV
  location   String
  x          String?      // twitter / X
  linkedin   String?
  calendly   String?
  telegram   String?
  discord    String?
  available  Boolean  @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Category {
  Builder
  Founder
  Developer
  Designer
  Investor
  Marketer
}


model CoverLetter {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique // <= UNA por usuario
  updatedAt DateTime @updatedAt
}

// Modelos NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
